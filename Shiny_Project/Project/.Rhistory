v$k[5] = NA
v
View(v)
View(v)
View(v)
v$k[5] = NA
v
filter(v, w==NA & k==NA)
filter(v, (w==NA) & (k==NA))
filter(v, (w==NA))
filter(v, w==NA)
anyNA(v)
filter(v, 'w'==NA)
filter(v, 'w'==NA)
v <- tbl_df(v)
filter(v, 'w'==NA)
v["w"] == NA
v
v["w"] = NA
v
v <- mutate(v,w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
# so i want to use fill starting from the 5th raw
v[-(1:4),]
v$k[5] = NA
v
class(v)
v <- tbl_df(v)
filter(v, 'w'==NA)
v["w"] = NA
filter(v, 'w'== "NA")
filter(v, w== "NA")
filter(v, w== 11)
filter(v, 'w' == 11)
v
v <- mutate(v,w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
library(dplyr)
library(ggplot2)
library(tidyr)
v <- mutate(v,w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
v[-(1:4),]
v$k[5] = NA
v
class(v)
v <- tbl_df(v)
filter(v, 'w'==NA)
v["w"] == NA
v$w == NA
v$w == "NA"
filter(v, is.na(w))
v
v
filter(v, is.na(w))
filter(v, is.na(w), is.na(k))
filter(v, is.na(w) & is.na(k))
filter()
filter(v, is.na(w) & is.na(k))
filter(v, is.na(w) & is.na(k)) = NULL
filter(v, is.na(w) & is.na(k))
v
v = NULL
v
v
v = NULL
v <- mutate(v,w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
v <- mutate(v = c(NA,3,2,1,NA,NA,7),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v <- mutate(v = c(NA,3,2,1,NA,NA,7,4),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v <- transmute(v = c(NA,3,2,1,NA,NA,7,4),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v <- data.frame(v = c(NA,3,2,1,NA,NA,7,4),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
v[-(1:4),]
v$k[5] = NA
v
v$v[5] = 13
class(v)
v
filter(v, is.na(w) & is.na(k))
filter(v, is.na(w) & is.na(k)) == NULL
transmute(v, j = w+k)
transmute(v,v, j = w+k)
transmute(v,v,w, j = w+k)
transmute(v,v,w,k, j = w+k)
mutate(v, w+j)
mutate(v, w+k)
v
shiny::runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
library(ggplot2)
library(dplyr)
library(tidyr)
cars <- data(mtcars)
cars
rm("cars")
mtcars
head(mtcars)
attributes(mtcars)
cars <- mtcars
head(cars)
rm(mtcars)
rm(faithful)
rm(diamonds,gender,my.faithful)
rm(knames)
rm(bnames)
View(serv)
rm(births,serv)
rm(index, iris_split,iris.name.split,test1,test2,useless)
rm(x,x1,x2,x3,y)
sapply(cars,class)
str(cars)
View(cars)
cars$cyl <- as.factor(cars$cyl)
str(cars)
cars$am <- as.factor(cars$am)
cars[ , c("gear","carb","vs")] = as.factor(cars[ , c("gear","carb","vs")])
cars[c("gear","carb","vs")]
cars[c("gear","carb","vs")] = as.factor(cars[c("gear","carb","vs")])
cars[c("gear","carb","vs")] = lapply(cars[c("gear","carb","vs")],as.factor)
cars[c("gear","carb","vs")]
str(cars)
cars[ , c("gear","carb","vs")]
class(cars[ , c("gear","carb","vs")])
class(cars[c("gear","carb","vs")])
head(cars)
str(cars)
lapply(colnames(cars),class)
sapply(colnames(cars),class)
sapply(cars,class)
sapply(cars,class) == "numeric"
num_cols <- colnames(sapply(cars,class) == "numeric")
num_cols
num_cols <- colnames(cars,sapply(cars,class) == "numeric")
num_cols
num_cols <- colnames(cars[sapply(cars,class) == "numeric"])
num_cols
num1_col <- filter(cars, cars == numeric)
num1_col <- Filter(is.numeric, cars)
num1_col
num1_col <- names(Filter(is.numeric, cars))
num1_col
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
g <- ggplot(cars, mapping = aes(x= am, y = mpg))
g + geom_point()
num_cols
g + geom_point(aes(x = disp))
g + geom_point(aes(x = disp), color = gear)
g + geom_point(aes(x = disp, color = gear))
g + geom_point(aes(x = disp, color = gear, size = cyl))
g <- ggplot(cars, mapping = aes(y = mpg))
g + geom_point(aes(x = disp, color = gear))
g + geom_jitter(aes(x = disp, color = gear))
g + geom_point(aes(x = disp, color = gear))
g + geom_point(aes(x = hp, color = gear))
str(cars)
head(cars)
g + geom_point(aes(x = wt, color = gear))
cat_cols <- names(Filter(is.facet,cars))
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
cat_cols
cat_cols <- names(Filter(is.factor,cars))
cat_cols
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
num_cols
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
g + geom_point(aes(x = wt, color = gear))
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
cat_cols
class(cat_cols)
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
list(cat_cols)
ls(cat_cols)
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
View(cars)
library(ggplot2)
library(dplyr)
library(tidyr)
cars <- mtcars
cars$cyl <- as.factor(cars$cyl)
cars$am <- as.factor(cars$am)
cars[c("gear","carb","vs")] = lapply(cars[c("gear","carb","vs")],as.factor)
num_cols <- colnames(cars[sapply(cars,class) == "numeric"])
cat_cols <- names(Filter(is.factor,cars))
g <- ggplot(cars, mapping = aes(y = mpg))
shiny::runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
num_cols <- colnames(cars[sapply(cars,class) == "numeric"])
num_cols
cat_cols <- names(Filter(is.factor,cars))
cat_cols
names(cars)
v <- names(cars)
class(v)
shiny::runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
class(cars)
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
head(cars)
num_cols
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
rm(cars)
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
Filter(is.factor,cars)
class(Filter(is.factor,cars))
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
head(cars)
ggplot(cars, aes_string(x = wt, y = mpg)) +
geom_point(aes_string(color = cyl))
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
shiny::runApp('~/Desktop/Bootcamp/Week2/3.Intro To Shiny/shinyHome1')
View(d2016.4thQ)
library(dplyr)
library(ggplot2)
library(tidyr)
d2016.4thQ <- read.csv("https://www.uscis.gov/sites/default/files/USCIS/Resources/Reports%20and%20Studies/Immigration%20Forms%20Data/Family-Based/I130_performancedata_fy2016_qtr4.csv",
stringsAsFactors = F, na.strings=c(""," ", "NA"))
View(d2016.4thQ)
names(d2016.4thQ)
#checking the columns for uselessnes.
useless <-  c()
for (i in 1:length(colnames(d2016.4thQ))){
if(all(sapply(d2016.4thQ[i],is.na)))
{
useless[i] = i
cat("The column number",i, "is useless!\n")
} else { cat(i,"is not empty\n")
if (dim(d2016.4thQ[i])[1] > 10){
cat("more than 10 raws\n")
} else {
cat(i,"th raw has the following useful things")
filter(d2016.4thQ, !sapply(d2016.4thQ[i],is.na))}
}
}
useless <- useless[!is.na(useless)]
useless
1.10**365
1.01**365
colnames(d2016.4thQ.US)
library(dplyr)
library(dplyr)
library(ggplot2)
library(tidyr)
d2016.4thQ <- read.csv("https://www.uscis.gov/sites/default/files/USCIS/Resources/Reports%20and%20Studies/Immigration%20Forms%20Data/Family-Based/I130_performancedata_fy2016_qtr4.csv",
stringsAsFactors = F, na.strings=c(""," ", "NA"))
str(d2016.4thQ)
attributes(d2016.4thQ)
names(d2016.4thQ)
#checking the columns for uselessnes.
useless <-  c()
for (i in 1:length(colnames(d2016.4thQ))){
if(all(sapply(d2016.4thQ[i],is.na)))
{
useless[i] = i
cat("The column number",i, "is useless!\n")
} else { cat(i,"is not empty\n")
if (dim(d2016.4thQ[i])[1] > 10){
cat("more than 10 raws\n")
} else {
cat(i,"th raw has the following useful things")
filter(d2016.4thQ, !sapply(d2016.4thQ[i],is.na))}
}
}
useless <- useless[!is.na(useless)]
useless
# after the check, removing the column
d2016.4thQ[useless] = NULL
# now lets look at the data again
str(d2016.4thQ)
attributes(d2016.4thQ)
# let us fill the blanks in the state column
# for this I am going to use fill() function from tydir package
# however, fill() needs NA's in the empty places, so i have to go back to the top
# and load the very first data with an extra parameter called
# na.strings = c("", " ", "NA"): this will treat all the elements of the given
# vector as values to be replaced with <NA>.
d2016.4thQ$X
# now i can use fill() to get the stats going
# but before i do it, i need to make sure what is my wish as a final result
v <- c(1,2,NA,NA,3,NA,NA,4)
v
v <- data.frame(v)
v
fill(v,v)
v
# so fill does not mutate the original column
# next, I dont really want to fill all the raws, i want to fill only the states,
# so i have to do some selection, in this case i will attampt to pass a selected
# column, that will have only the raws with state info, and will leave out the
# first several discriptive raws, as well as every region that follows after the
# last state.
#### back to the data
d2016.4thQ[1]
# cleaning empty raws (the ones that have only the state column input)
filter(v, is.na(w) & is.na(k)) # the code to check if the row is NA!
# lets chop our data frame and take only the US part of it. that is, we
# are taking only the first 135 raws.
d2016.4thQ.US <- d2016.4thQ[1:135,]
# now, from raw 8 till 135 i want to use fill() to fill the state column
# data.
d2016.4thQ.US[8:135,1] <- fill(d2016.4thQ.US[8:135,1, drop = F],X)
# lets do this on a dummy, than apply it to the dataframe
v <- data.frame(v = c(NA,3,2,1,NA,NA,7,4),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
# so i want to use fill starting from the 5th raw
v[-(1:4),]
v$k[5] = NA
v$v[5] = 13
# cleaning empty raws (the ones that have only the state column input)
filter(v, is.na(w) & is.na(k)) # the code to check if the row is NA!
filter(v,sapply(colnames(v),is.na))
class(sapply(v,is.na))
### Look into Bookmarks for an excelant post on droping NA raws!
# for now im just gonna use filter(v, is.na(w) & is.na(k))
# If i look at the data without the first column, then i should have rows
# that have only NA's in them. hence selection should be piped into the
# above code.
colnames(d2016.4thQ.US)
dim(d2016.4thQ.US)
dim(d2016.4thQ.US[is.na(d2016.4thQ.US$X.1) & is.na(d2016.4thQ.US$X.2),])
# so there are 52 rows, so i will take the slice 8:52 and == NULL
# that didnt , work, i need to reassign by taking the negative of this...
rows.to.remov <- as.numeric(rownames(d2016.4thQ.US[is.na(d2016.4thQ.US$X.1) & is.na(d2016.4thQ.US$X.2),][8:52,]))
d2016.4thQ.US <- d2016.4thQ.US[-rows.to.remov,]
#renaming the rows
rownames(d2016.4thQ.US) <- 1:nrow(d2016.4thQ.US)
# let us do some editing in excel
write.csv(d2016.4thQ.US, file = "d2016.4thQ.US")
# i need to include 5 major field offices to the data
View(d2016.4thQ)
v
p <- data.frame(v = c(1,2),w = c(3,4), k=c(5,6))
p
join(v,p)
merge(v,p)
merge(v,p,all.p)
merge(v,p,all.p =T)
merge(v,p,all.v =T)
rbind(v,p)
rbind(v,p)
rbind(v[1:3,],p)
d2016.4thQ[144:149,]
end(d2016.4thQ.US)
tail(d2016.4thQ.US)
library(dplyr)
library(ggplot2)
library(tidyr)
d2016.4thQ <- read.csv("https://www.uscis.gov/sites/default/files/USCIS/Resources/Reports%20and%20Studies/Immigration%20Forms%20Data/Family-Based/I130_performancedata_fy2016_qtr4.csv",
stringsAsFactors = F, na.strings=c(""," ", "NA"))
str(d2016.4thQ)
attributes(d2016.4thQ)
names(d2016.4thQ)
#checking the columns for uselessnes.
useless <-  c()
for (i in 1:length(colnames(d2016.4thQ))){
if(all(sapply(d2016.4thQ[i],is.na)))
{
useless[i] = i
cat("The column number",i, "is useless!\n")
} else { cat(i,"is not empty\n")
if (dim(d2016.4thQ[i])[1] > 10){
cat("more than 10 raws\n")
} else {
cat(i,"th raw has the following useful things")
filter(d2016.4thQ, !sapply(d2016.4thQ[i],is.na))}
}
}
useless <- useless[!is.na(useless)]
useless
# after the check, removing the column
d2016.4thQ[useless] = NULL
# now lets look at the data again
str(d2016.4thQ)
attributes(d2016.4thQ)
# let us fill the blanks in the state column
# for this I am going to use fill() function from tydir package
# however, fill() needs NA's in the empty places, so i have to go back to the top
# and load the very first data with an extra parameter called
# na.strings = c("", " ", "NA"): this will treat all the elements of the given
# vector as values to be replaced with <NA>.
d2016.4thQ$X
# now i can use fill() to get the stats going
# but before i do it, i need to make sure what is my wish as a final result
v <- c(1,2,NA,NA,3,NA,NA,4)
v
v <- data.frame(v)
v
fill(v,v)
v
# so fill does not mutate the original column
# next, I dont really want to fill all the raws, i want to fill only the states,
# so i have to do some selection, in this case i will attampt to pass a selected
# column, that will have only the raws with state info, and will leave out the
# first several discriptive raws, as well as every region that follows after the
# last state.
#### back to the data
d2016.4thQ[1]
# cleaning empty raws (the ones that have only the state column input)
filter(v, is.na(w) & is.na(k)) # the code to check if the row is NA!
# lets chop our data frame and take only the US part of it. that is, we
# are taking only the first 135 raws.
d2016.4thQ.US <- d2016.4thQ[1:135,]
# now, from raw 8 till 135 i want to use fill() to fill the state column
# data.
d2016.4thQ.US[8:135,1] <- fill(d2016.4thQ.US[8:135,1, drop = F],X)
# lets do this on a dummy, than apply it to the dataframe
v <- data.frame(v = c(NA,3,2,1,NA,NA,7,4),w = c(1,2,34,3,NA,5,6,NA), k = rep(c(10,NA,11,12),2))
v
# so i want to use fill starting from the 5th raw
v[-(1:4),]
v$k[5] = NA
v$v[5] = 13
# cleaning empty raws (the ones that have only the state column input)
filter(v, is.na(w) & is.na(k)) # the code to check if the row is NA!
filter(v,sapply(colnames(v),is.na))
class(sapply(v,is.na))
### Look into Bookmarks for an excelant post on droping NA raws!
# for now im just gonna use filter(v, is.na(w) & is.na(k))
# If i look at the data without the first column, then i should have rows
# that have only NA's in them. hence selection should be piped into the
# above code.
colnames(d2016.4thQ.US)
dim(d2016.4thQ.US)
dim(d2016.4thQ.US[is.na(d2016.4thQ.US$X.1) & is.na(d2016.4thQ.US$X.2),])
# so there are 52 rows, so i will take the slice 8:52 and == NULL
# that didnt , work, i need to reassign by taking the negative of this...
rows.to.remov <- as.numeric(rownames(d2016.4thQ.US[is.na(d2016.4thQ.US$X.1) & is.na(d2016.4thQ.US$X.2),][8:52,]))
d2016.4thQ.US <- d2016.4thQ.US[-rows.to.remov,]
#renaming the rows
rownames(d2016.4thQ.US) <- 1:nrow(d2016.4thQ.US)
# let us do some editing in excel
write.csv(d2016.4thQ.US, file = "d2016.4thQ.US")
# i need to include 5 major field offices to the data, which are the
# rows 144-149 in the original data
# lets do some tests to understand rbind()
v
p <- data.frame(v = c(1,2),w = c(3,4), k=c(5,6))
p
rbind(v,p)
# so all i have to do is take a seporate chunck of the original Data
rbind(v[1:3,],p)
# i think we are ready to deal with the actual data
d2016.4thQ[144:149,]
d2016.4thQ.US <- rbind(d2016.4thQ.US,d2016.4thQ[144:149,])
tail(d2016.4thQ.US)
setwd("~/Desktop/Bootcamp/bootcamp008_project/Project1-ExploreVis/VaheVoskerchyan")
shiny::runApp('Shiny1')
runApp('Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
runApp('~/Desktop/Bootcamp/Project/Shiny1')
library(mapproj)
library(maps)
library(mapproj)
shades <- colorRampPalette(c("white", "darkgreen"))(100)
getwd()
data <- read.csv('./Shiny1/data/thestepmother.csv')
str(data)
library(dplyr)
data %>% group_by(year,quarter,state)
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
